{"version":3,"file":"static/js/293.6aacf948.chunk.js","mappings":"iQAEaA,E,MAAWC,GAAAA,GAAH,wK,SCuBrB,EAxBa,SAAC,GAAc,IAGlBC,EAHiB,EAAXC,KAGSC,KAAI,SAAAC,GACzB,IAAQC,EAA+CD,EAA/CC,GAAIC,EAA2CF,EAA3CE,aAAcC,EAA6BH,EAA7BG,cAAeC,EAAcJ,EAAdI,UACnC,OACE,2BACE,gBACEC,IACEH,EAAY,yCAC0BA,GAD1B,uCAIdI,IAAKH,EAAgBI,MAAM,SAE7B,wBACE,uBAAIJ,GAAgC,WAEtC,uBAAIC,GAAwB,UAZrBH,EAeZ,IACD,OAAO,SAACN,EAAD,UAAWE,GACrB,ECcL,EAjCiB,WACf,OAAkCW,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAEA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAmBR,OAjBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,2FACjBN,GAAa,GADI,mBAGUO,EAAAA,EAAAA,IAAgBJ,GAH1B,OAGTG,EAHS,OAKfE,QAAQC,IAAIH,GAEZR,EAAaQ,GAPE,gDASfJ,EAAS,EAAD,IATO,yBAWfF,GAAa,GAXE,4EAAH,qDAchBM,GACD,GAAE,CAACH,KAEF,gCACGJ,IAAa,sCACbF,IAAa,SAAC,EAAD,CAAMX,KAAMW,IACzBI,IAAS,sCAGf,C,+LCnCKS,EAAO,mCAEbC,EAAAA,EAAAA,SAAAA,QAAyB,gCAGlB,IAAMC,EAAiB,mCAAG,sGACRD,EAAAA,EAAAA,IAAA,qCAAwCD,IADhC,uBACvBxB,EADuB,EACvBA,KADuB,kBAExBA,EAAKD,SAFmB,2CAAH,qDAKjB4B,EAAc,mCAAG,WAAOC,GAAP,yFACLH,EAAAA,EAAAA,IAAA,+BACGD,EADH,kBACoBI,IAFf,uBACpB5B,EADoB,EACpBA,KADoB,kBAIrBA,EAAKD,SAJgB,2CAAH,sDAOd8B,EAAe,mCAAG,WAAOZ,GAAP,yFACNQ,EAAAA,EAAAA,IAAA,gBAAmBR,EAAnB,oBAAsCO,IADhC,uBACrBxB,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAIfqB,EAAe,mCAAG,WAAOJ,GAAP,yFACPQ,EAAAA,EAAAA,IAAA,gBACXR,EADW,4BACgBO,IAFT,uBACtBxB,EADsB,EACtBA,KADsB,kBAItBA,EAAK8B,MAJiB,2CAAH,sDAOfC,EAAe,mCAAG,WAAOd,GAAP,yFACNQ,EAAAA,EAAAA,IAAA,gBACZR,EADY,4BACeO,IAFT,uBACrBxB,EADqB,EACrBA,KADqB,kBAItBA,EAAKD,SAJiB,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js","pages/CastPage.js","servises/axios-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  column-gap: 20px;\n  row-gap: 20px;\n  list-style: none;\n  padding: 10px;\n`;","import { CastList } from './Cast.styled';\nconst Cast = ({ data }) => {\n// console.log(data);\n\n    const results = data.map(item => {\n    const { id, profile_path, original_name, character } = item;\n          return (\n            <li key={id}>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : `https://i.ibb.co/yQNvgQ7/1231313.jpg`\n                }\n                alt={original_name}  width=\"100\" \n              />\n              <p>\n                <b>{original_name ? original_name : '...'}</b>\n              </p>\n              <p>{character ? character : '...'}</p>\n            </li>\n          );\n        });\n        return <CastList>{results}</CastList>;\n    }\nexport default Cast;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'servises/axios-api';\nimport Cast from 'components/Cast/Cast';\n\nconst CastPage = () => {\n  const [movieCast, setMovieCast] = useState([]);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getCredits = async () => {\n      setIsLoading(true);\n      try {\n        const getCredits = await getMovieCredits(movieId);\n\n        console.log(getCredits);\n\n        setMovieCast(getCredits);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getCredits();\n  }, [movieId]);\n  return (\n    <>\n      {isLoading && <p>Loading...</p>}\n      {movieCast && <Cast data={movieCast} />}\n      {error && <p> Oops...</p>}\n    </>\n  );\n};\n\nexport default CastPage;\n","import axios from 'axios';\nconst API_KEY = `d6e594172c33afd2a5e4738620913491`;\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return data.results\n};\n\nexport const getSearchMovie = async (searchQuery) => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${searchQuery}`\n  );\n  return data.results;\n};\n\nexport const getMovieDetails = async (movieId) => {\n  const { data } = await axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n  return data;\n};\nexport const getMovieCredits = async (movieId) => {\n  const {data } = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return data.cast;\n};\n\nexport const getMovieReviews = async (movieId) => {\n  const { data } = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return data.results;\n};\n"],"names":["CastList","styled","results","data","map","item","id","profile_path","original_name","character","src","alt","width","useState","movieCast","setMovieCast","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","getCredits","getMovieCredits","console","log","API_KEY","axios","getTrendingMovies","getSearchMovie","searchQuery","getMovieDetails","cast","getMovieReviews"],"sourceRoot":""}